@inject IModalService ModalService;
@inject INotificationService NotificationService;
@inject HttpClient Http;

<ModalHeader>
    <ModalTitle>Solicitar relatório</ModalTitle>
</ModalHeader>
<ModalBody>
         <Field ColumnSize="ColumnSize.Is12.OnDesktop">
         <FieldLabel>Digite seu email para envio do relatório.</FieldLabel>
            <FieldBody>
            <TextEdit Role="TextRole.Email" @bind-Text="@emailDestinatario"></TextEdit>
            </FieldBody>
         </Field>
</ModalBody>

<ModalFooter Flex="Flex.JustifyContent.End">
    <Button Color="Color.Success" Clicked="SolicitarRelatorio">Enviar</Button>
</ModalFooter>

@code {
    [Parameter] public Func<bool, Task> OnSuccess { get; set; }

    string emailDestinatario = string.Empty;

    public async Task SolicitarRelatorio()
    {
        if (string.IsNullOrEmpty(emailDestinatario) || !emailDestinatario.Contains("@"))
        {
            await NotificationService.Error("Email invalido", "Erro");
            return;
        }

        var request = await Http.PostAsync($"api/Relatorio/estoque-sangue?email={emailDestinatario}", null);

        if (request.IsSuccessStatusCode)
        {
            await NotificationService.Success("Email enviado, verifique a caixa de spam.", "Sucesso");
        }
        else
        {
           await NotificationService.Error("Ops algum erro ocorreu", "Erro");
        }

        await ModalService.Hide();
    }
}
